

//1 : cell
//0 : wall
//-1 : visited

public class main {

    public static boolean goalAchieved=false;
    int[][] matrice = { 
    { 1,0, 0, 0,1, 1, 1,1, 1, 1,1, 1, 1 },
    { 1,0, 0, 0,0, 0, 1,1, 1, 1,1, 1, 1 },
    { 1,0, 0, 1,1, 0, 0,0, 0, 0,0, 0, 0 },
    { 1,0, 0, 1,1, 0, 1,1, 1, 1,1, 1, 0 },
    { 1,0, 0, 1,1, 0, 1,1, 1, 1,1, 1, 1 },
    { 1,0, 0, 0,0, 0, 1,1, 1, 1,0, 0, 0 },
    { 1,0, 0, 1,1, -1, 1,1, 1, 1,1, 1, 0 },
    { 1,0, 0, 0,1, 1, 1,0, 0, 0,0, 0, 0 },
    { 1,0, 0, 1,1, 1, 1,0, 1, 1,0, 0, 1 },
    { 1,0, 0, 0,0, 0, 0,0, 0, 0,0, 0, 7 },
    { 1,0, 0, 1,1, 1, 0,0, 1, 1,1, 0, 0 },
    { 1,0, 0, 0,0, 0, 0,0, 1, 0,1, 0, 0 },
    { 1,1, 1, 1,1, 1, 1,1, 1, 0,1, 1, 1 }};

    public static void setStatic() {
        goalAchieved=true;
    }
    
    main(int[][] matrice){
        for (int i = 0; i < 13; i++) {
            for (int j = 0; j < 13; j++) {
                this.matrice[i][j]= matrice[j][i];
                this.matrice[j][i]=matrice[i][j];
            }
        }
    }

     public static void main(String[] args) {
                int[][] mat = { 
                    { 1,0, 0, 1,0, 1, 0,1, 1, 1,1, 1, 1 },
                    { 1,0, 0, 1,0, 1, 0,1, 1, 1,1, 1, 1 },
                    { 1,0, 0, 1,0, 1, 0,0, 0, 0,0, 0, 0 },
                    { 1,0, 0, 1,0, 1, 1,1, 1, 1,1, 1, 1 },
                    { 1,0, 1, 1,0, 0, 0,0, 0, 0,0, 0, 1 },
                    { 1,0, 0, 1,0, 0, 1,1, 1, 1,0, 0, 1 },
                    { 1,0, 0, 1,0, -1, 1,1, 1, 1,1,0, 1 },
                    { 1,1, 1, 0,0, 1, 1,0, 0, 0,0, 0, 1 },
                    { 0,0, 1, 0,1, 0, 1,0, 1, 1,0, 0, 1 },
                    { 1,0, 1, 0,0, 0, 0,0, 0, 0,0, 0, 1 },
                    { 1,1, 1, 1,1, 1, 1,1, 1, 1,0, 0, 1 },
                    { 0,0, 1, 0,0, 0, 0,0, 0, 1,0, 0, 1 },
                    { 1,1, 1, 0,1, 1, 1,1, 0, 1,0, 1, 1 }};
                main m=new main(mat);
                int[] start={0,0};
                Thread  mazeSolver=new MazeSolver(m.matrice,start,"main" ) ;
                mazeSolver.start();    
            
    }
}
